var React = require('react');
var RadarAction = require('../actions/RadarAction');

var OssList = React.createClass({displayName: "OssList",
  componentDidUpdate: function() {
    // 選択されているOSSが表示されるようにscrollTopを変更する
    if (!this.props.selectedOssId || !this.refs[this.props.selectedOssId]) return;
    var el = this.refs[this.props.selectedOssId].getDOMNode();
    var listContainer = this.refs.listContainer.getDOMNode();
    var scrollTop = parseInt(listContainer.scrollTop, 10);
    var targetTop = parseInt(el.style.top, 10);
    if (scrollTop > targetTop || scrollTop + 610 < targetTop) {
      listContainer.scrollTop = targetTop;
    }
  },
  _lists: function() {
    var _this = this;
    var ranks = {};
    this.props.dotPosition.forEach(function(pos, i) {
      ranks[pos.product.id] = {
        rank: i + 1,
        color: pos.color,
        top: i * 20
      };
    });

    return this.props.dotPosition.map(function(position, i) {
      var oss = position.product;
      var style = {
        position: 'absolute',
        color: ranks[oss.id].color,
        width: '100%',
        transition: 'top 1s',
        top: ranks[oss.id].top + 'px'
      };
      if (_this.props.selectedOssId === oss.id) style.backgroundColor = '#f2dede';
      var label = ranks[oss.id].rank + '. ' + oss.name;
      var url = "http://radar.oss.scsk.info/product/" + oss.id + "/summary/" + _this.props.yearMonth;
      return React.createElement("li", {ref: oss.id, key: 'oss-' + oss.id, style: style, onMouseOver: _this._onMouseOver, "data-ossid": oss.id}, 
        React.createElement("a", {href: url}, label)
      )
    });
  },
  _onMouseOver: function(e) {
    var target;
    if (e.target.tagName.toUpperCase() ==='A') target = e.target.parentNode;
    else target = e.target;
    var ossId = target.getAttribute('data-ossid');
    RadarAction.updateSelectedOss(ossId);
  },
  render: function() {
    var listStyle = {
      position: 'relative'
    };
    return (
      React.createElement("div", {key: "oss", className: "list-container"}, 
        React.createElement("div", {key: "oss-container", className: "oss-container"}, 
          React.createElement("h3", {key: "oss-title"}, "対象のOSS"), 
          React.createElement("ul", {ref: "listContainer", key: "oss-list", className: "oss-list", style: listStyle}, 
             this._lists() 
          )
        )
      )
    );
  },

});

module.exports = OssList;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvT3NzTGlzdC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDOztBQUVwRCxJQUFJLDZCQUE2Qix1QkFBQTtBQUNqQyxFQUFFLGtCQUFrQixFQUFFLFdBQVc7O0lBRTdCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRSxPQUFPO0lBQzlFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMxRCxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6RCxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN0RCxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0MsSUFBSSxTQUFTLEdBQUcsU0FBUyxJQUFJLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxFQUFFO01BQ3hELGFBQWEsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0tBQ3JDO0dBQ0Y7RUFDRCxNQUFNLEVBQUUsV0FBVztJQUNqQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDakIsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRTtNQUM5QyxLQUFL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QUEsRUFBZSxDQUFDLEdBQUEsRUFBRyxDQUFDLFVBQUEsRUFBVSxDQUFDLFNBQUEsRUFBUyxDQUFDLFVBQUEsRUFBVSxDQUFDLEtBQUEsRUFBSyxDQUFFLFNBQVcsQ0FBQSxFQUFBO1lBQzNFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBSTtVQUNkLENBQUE7UUFDRCxDQUFBO01BQ0YsQ0FBQTtNQUNOO0FBQ04sR0FBRzs7QUFFSCxDQUFDLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyIsImZpbGUiOiJjb21wb25lbnRzL09zc0xpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJhZGFyQWN0aW9uID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9SYWRhckFjdGlvbicpO1xuXG52YXIgT3NzTGlzdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAvLyDpgbjmip7jgZXjgozjgabjgYTjgotPU1PjgYzooajnpLrjgZXjgozjgovjgojjgYbjgatzY3JvbGxUb3DjgpLlpInmm7TjgZnjgotcbiAgICBpZiAoIXRoaXMucHJvcHMuc2VsZWN0ZWRPc3NJZCB8fCAhdGhpcy5yZWZzW3RoaXMucHJvcHMuc2VsZWN0ZWRPc3NJZF0pIHJldHVybjtcbiAgICB2YXIgZWwgPSB0aGlzLnJlZnNbdGhpcy5wcm9wcy5zZWxlY3RlZE9zc0lkXS5nZXRET01Ob2RlKCk7XG4gICAgdmFyIGxpc3RDb250YWluZXIgPSB0aGlzLnJlZnMubGlzdENvbnRhaW5lci5nZXRET01Ob2RlKCk7XG4gICAgdmFyIHNjcm9sbFRvcCA9IHBhcnNlSW50KGxpc3RDb250YWluZXIuc2Nyb2xsVG9wLCAxMCk7XG4gICAgdmFyIHRhcmdldFRvcCA9IHBhcnNlSW50KGVsLnN0eWxlLnRvcCwgMTApO1xuICAgIGlmIChzY3JvbGxUb3AgPiB0YXJnZXRUb3AgfHwgc2Nyb2xsVG9wICsgNjEwIDwgdGFyZ2V0VG9wKSB7XG4gICAgICBsaXN0Q29udGFpbmVyLnNjcm9sbFRvcCA9IHRhcmdldFRvcDtcbiAgICB9XG4gIH0sXG4gIF9saXN0czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgcmFua3MgPSB7fTtcbiAgICB0aGlzLnByb3BzLmRvdFBvc2l0aW9uLmZvckVhY2goZnVuY3Rpb24ocG9zLCBpKSB7XG4gICAgICByYW5rc1twb3MucHJvZHVjdC5pZF0gPSB7XG4gICAgICAgIHJhbms6IGkgKyAxLFxuICAgICAgICBjb2xvcjogcG9zLmNvbG9yLFxuICAgICAgICB0b3A6IGkgKiAyMFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLnByb3BzLmRvdFBvc2l0aW9uLm1hcChmdW5jdGlvbihwb3NpdGlvbiwgaSkge1xuICAgICAgdmFyIG9zcyA9IHBvc2l0aW9uLnByb2R1Y3Q7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBjb2xvcjogcmFua3Nbb3NzLmlkXS5jb2xvcixcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ3RvcCAxcycsXG4gICAgICAgIHRvcDogcmFua3Nbb3NzLmlkXS50b3AgKyAncHgnXG4gICAgICB9O1xuICAgICAgaWYgKF90aGlzLnByb3BzLnNlbGVjdGVkT3NzSWQgPT09IG9zcy5pZCkgc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNmMmRlZGUnO1xuICAgICAgdmFyIGxhYmVsID0gcmFua3Nbb3NzLmlkXS5yYW5rICsgJy4gJyArIG9zcy5uYW1lO1xuICAgICAgdmFyIHVybCA9IFwiaHR0cDovL3JhZGFyLm9zcy5zY3NrLmluZm8vcHJvZHVjdC9cIiArIG9zcy5pZCArIFwiL3N1bW1hcnkvXCIgKyBfdGhpcy5wcm9wcy55ZWFyTW9udGg7XG4gICAgICByZXR1cm4gPGxpIHJlZj17b3NzLmlkfSBrZXk9eydvc3MtJyArIG9zcy5pZH0gc3R5bGU9e3N0eWxlfSBvbk1vdXNlT3Zlcj17X3RoaXMuX29uTW91c2VPdmVyfSBkYXRhLW9zc2lkPXtvc3MuaWR9PlxuICAgICAgICA8YSBocmVmPXt1cmx9PntsYWJlbH08L2E+XG4gICAgICA8L2xpPlxuICAgIH0pO1xuICB9LFxuICBfb25Nb3VzZU92ZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgdGFyZ2V0O1xuICAgIGlmIChlLnRhcmdldC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09J0EnKSB0YXJnZXQgPSBlLnRhcmdldC5wYXJlbnROb2RlO1xuICAgIGVsc2UgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgdmFyIG9zc0lkID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1vc3NpZCcpO1xuICAgIFJhZGFyQWN0aW9uLnVwZGF0ZVNlbGVjdGVkT3NzKG9zc0lkKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGlzdFN0eWxlID0ge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGtleT1cIm9zc1wiIGNsYXNzTmFtZT1cImxpc3QtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYga2V5PVwib3NzLWNvbnRhaW5lclwiIGNsYXNzTmFtZT1cIm9zcy1jb250YWluZXJcIj5cbiAgICAgICAgICA8aDMga2V5PVwib3NzLXRpdGxlXCI+5a++6LGh44GuT1NTPC9oMz5cbiAgICAgICAgICA8dWwgcmVmPVwibGlzdENvbnRhaW5lclwiIGtleT1cIm9zcy1saXN0XCIgY2xhc3NOYW1lPVwib3NzLWxpc3RcIiBzdHlsZT17bGlzdFN0eWxlfT5cbiAgICAgICAgICAgIHsgdGhpcy5fbGlzdHMoKSB9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9LFxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBPc3NMaXN0O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9