var React = require('react');
var Router = require('react-router'); 
var routes = require('./routes');
var async = require('async');
var request = require('superagent');
var Constants = require('./Constants');
var RadarStore = require('./stores/RadarStore');

Router.run(routes, Router.HistoryLocation, function (Handler, args) {
  var urls, categoryId;
  var isChildCategory = !!args.params.categoryId;
  request.get(Constants.ROOT_PATH + 'radarScope/rank_date.json').end(function(res) {
    var rankDates = res.body.map(function(unixTime) { return new Date(unixTime * 1000); });
    var yearMonth = args.params.yearMonth;
    if (!yearMonth) yearMonth = rankDates[0].toFormat('YYYYMM');
    if (isChildCategory) {
      categoryId = args.params.categoryId;
      urls = [
        Constants.ROOT_PATH + 'radarScope/' + categoryId + '/' + yearMonth +  '.json',
        Constants.ROOT_PATH + 'radarScope/categories/' + categoryId + '.json',
        Constants.ROOT_PATH + 'radarScope/products.json'
      ];
    } else {
      categoryId = 'root';
      urls = [
        Constants.ROOT_PATH + 'radarScope/' + yearMonth +  '.json',
        Constants.ROOT_PATH + 'radarScope/categories/' + categoryId + '.json',
        Constants.ROOT_PATH + 'radarScope/products.json'
      ];
    }
    async.map(urls, function(url, cb) {
      request.get(url).end(function(res) {
        cb(null, res);
      });
    }, function(err, responses) {
      for (var i = 0, len = responses.length; i < len; i++) {
        if (responses[i].error) {
          return;
        }
      }
      var ranking = responses[0].body;
      var categories = responses[1].body;
      var products = responses[2].body;
      var dotPosition = RadarStore.calcDotPosition(args.path, yearMonth, ranking, categories, isChildCategory);
      console.log(dotPosition);
      var props = {
        isChildCategory: isChildCategory,
        ranking: ranking,
        categories: categories,
        products: products,
        yearMonth: yearMonth,
        rankDates: rankDates,
        dotPosition: dotPosition
      };
      React.render(React.createElement(Handler, React.__spread({},  props)), document.getElementById('radarScope'));
    });
  });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNyQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNwQyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7O0FBRWhELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxlQUFlLEVBQUUsVUFBVSxPQUFPLEVBQUUsSUFBSSxFQUFFO0VBQ2xFLElBQUksSUFBSSxFQUFFLFVBQVUsQ0FBQztFQUNyQixJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7RUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLDJCQUEyQixDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFO0lBQy9FLElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsUUFBUSxFQUFFLEVBQUUsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkYsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDdEMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1RCxJQUFJLGVBQWUsRUFBRTtNQUNuQixVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7TUFDcEMsSUFBSSxHQUFHO1FBQ0wsU0FBUyxDQUFDLFNBQVMsR0FBRyxhQUFhLEdBQUcsVUFBVSxHQUFHLEdBQUcsR0FBRyxTQUFTLElBQUksT0FBTztRQUM3RSxTQUFTLENBQUMsU0FBUyxHQUFHLHdCQUF3QixHQUFHLFVBQVUsR0FBRyxPQUFPO1FBQ3JFLFNBQVMsQ0FBQyxTQUFTLEdBQUcsMEJBQTBCO09BQ2pELENBQUM7S0FDSCxNQUFNO01BQ0wsVUFBVSxHQUFHLE1BQU0sQ0FBQztNQUNwQixJQUFJLEdBQUc7UUFDTCxTQUFTLENBQUMsU0FBUyxHQUFHLGFBQWEsR0FBRyxTQUFTLElBQUksT0FBTztRQUMxRCxTQUFTLENBQUMsU0FBUyxHQUFHLHdCQUF3QixHQUFHLFVBQVUsR0FBRyxPQUFPO1FBQ3JFLFNBQVMsQ0FBQyxTQUFTLEdBQUcsMEJBQTBCO09BQ2pELENBQUM7S0FDSDtJQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsR0FBRyxFQUFFLEVBQUUsRUFBRTtNQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsRUFBRTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO09BQ2YsQ0FBQyxDQUFDO0tBQ0osRUFBRSxTQUFTLEdBQUcsRUFBRSxTQUFTLEVBQUU7TUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNwRCxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7VUFDdEIsT0FBTztTQUNSO09BQ0Y7TUFDRCxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO01BQ2hDLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7TUFDbkMsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztNQUNqQyxJQUFJLFdBQVcsR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsZUFBZSxDQUFDLENBQUM7TUFDekcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztNQUN6QixJQUFJLEtBQUssR0FBRztRQUNWLGVBQWUsRUFBRSxlQUFlO1FBQ2hDLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFNBQVMsRUFBRSxTQUFTO1FBQ3BCLFNBQVMsRUFBRSxTQUFTO1FBQ3BCLFdBQVcsRUFBRSxXQUFXO09BQ3pCLENBQUM7TUFDRixLQUFLLENBQUMsTUFBTSxDQUFDLG9CQUFDLE9BQU8sRUFBQSxnQkFBQSxHQUFBLENBQUUsR0FBRyxLQUFNLENBQUUsQ0FBQSxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztLQUM1RSxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSb3V0ZXIgPSByZXF1aXJlKCdyZWFjdC1yb3V0ZXInKTsgXG52YXIgcm91dGVzID0gcmVxdWlyZSgnLi9yb3V0ZXMnKTtcbnZhciBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3N1cGVyYWdlbnQnKTtcbnZhciBDb25zdGFudHMgPSByZXF1aXJlKCcuL0NvbnN0YW50cycpO1xudmFyIFJhZGFyU3RvcmUgPSByZXF1aXJlKCcuL3N0b3Jlcy9SYWRhclN0b3JlJyk7XG5cblJvdXRlci5ydW4ocm91dGVzLCBSb3V0ZXIuSGlzdG9yeUxvY2F0aW9uLCBmdW5jdGlvbiAoSGFuZGxlciwgYXJncykge1xuICB2YXIgdXJscywgY2F0ZWdvcnlJZDtcbiAgdmFyIGlzQ2hpbGRDYXRlZ29yeSA9ICEhYXJncy5wYXJhbXMuY2F0ZWdvcnlJZDtcbiAgcmVxdWVzdC5nZXQoQ29uc3RhbnRzLlJPT1RfUEFUSCArICdyYWRhclNjb3BlL3JhbmtfZGF0ZS5qc29uJykuZW5kKGZ1bmN0aW9uKHJlcykge1xuICAgIHZhciByYW5rRGF0ZXMgPSByZXMuYm9keS5tYXAoZnVuY3Rpb24odW5peFRpbWUpIHsgcmV0dXJuIG5ldyBEYXRlKHVuaXhUaW1lICogMTAwMCk7IH0pO1xuICAgIHZhciB5ZWFyTW9udGggPSBhcmdzLnBhcmFtcy55ZWFyTW9udGg7XG4gICAgaWYgKCF5ZWFyTW9udGgpIHllYXJNb250aCA9IHJhbmtEYXRlc1swXS50b0Zvcm1hdCgnWVlZWU1NJyk7XG4gICAgaWYgKGlzQ2hpbGRDYXRlZ29yeSkge1xuICAgICAgY2F0ZWdvcnlJZCA9IGFyZ3MucGFyYW1zLmNhdGVnb3J5SWQ7XG4gICAgICB1cmxzID0gW1xuICAgICAgICBDb25zdGFudHMuUk9PVF9QQVRIICsgJ3JhZGFyU2NvcGUvJyArIGNhdGVnb3J5SWQgKyAnLycgKyB5ZWFyTW9udGggKyAgJy5qc29uJyxcbiAgICAgICAgQ29uc3RhbnRzLlJPT1RfUEFUSCArICdyYWRhclNjb3BlL2NhdGVnb3JpZXMvJyArIGNhdGVnb3J5SWQgKyAnLmpzb24nLFxuICAgICAgICBDb25zdGFudHMuUk9PVF9QQVRIICsgJ3JhZGFyU2NvcGUvcHJvZHVjdHMuanNvbidcbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhdGVnb3J5SWQgPSAncm9vdCc7XG4gICAgICB1cmxzID0gW1xuICAgICAgICBDb25zdGFudHMuUk9PVF9QQVRIICsgJ3JhZGFyU2NvcGUvJyArIHllYXJNb250aCArICAnLmpzb24nLFxuICAgICAgICBDb25zdGFudHMuUk9PVF9QQVRIICsgJ3JhZGFyU2NvcGUvY2F0ZWdvcmllcy8nICsgY2F0ZWdvcnlJZCArICcuanNvbicsXG4gICAgICAgIENvbnN0YW50cy5ST09UX1BBVEggKyAncmFkYXJTY29wZS9wcm9kdWN0cy5qc29uJ1xuICAgICAgXTtcbiAgICB9XG4gICAgYXN5bmMubWFwKHVybHMsIGZ1bmN0aW9uKHVybCwgY2IpIHtcbiAgICAgIHJlcXVlc3QuZ2V0KHVybCkuZW5kKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICBjYihudWxsLCByZXMpO1xuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24oZXJyLCByZXNwb25zZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZXNwb25zZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlc1tpXS5lcnJvcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHJhbmtpbmcgPSByZXNwb25zZXNbMF0uYm9keTtcbiAgICAgIHZhciBjYXRlZ29yaWVzID0gcmVzcG9uc2VzWzFdLmJvZHk7XG4gICAgICB2YXIgcHJvZHVjdHMgPSByZXNwb25zZXNbMl0uYm9keTtcbiAgICAgIHZhciBkb3RQb3NpdGlvbiA9IFJhZGFyU3RvcmUuY2FsY0RvdFBvc2l0aW9uKGFyZ3MucGF0aCwgeWVhck1vbnRoLCByYW5raW5nLCBjYXRlZ29yaWVzLCBpc0NoaWxkQ2F0ZWdvcnkpO1xuICAgICAgY29uc29sZS5sb2coZG90UG9zaXRpb24pO1xuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBpc0NoaWxkQ2F0ZWdvcnk6IGlzQ2hpbGRDYXRlZ29yeSxcbiAgICAgICAgcmFua2luZzogcmFua2luZyxcbiAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcmllcyxcbiAgICAgICAgcHJvZHVjdHM6IHByb2R1Y3RzLFxuICAgICAgICB5ZWFyTW9udGg6IHllYXJNb250aCxcbiAgICAgICAgcmFua0RhdGVzOiByYW5rRGF0ZXMsXG4gICAgICAgIGRvdFBvc2l0aW9uOiBkb3RQb3NpdGlvblxuICAgICAgfTtcbiAgICAgIFJlYWN0LnJlbmRlcig8SGFuZGxlciB7Li4ucHJvcHN9Lz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYWRhclNjb3BlJykpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9