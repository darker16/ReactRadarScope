/**
 *  Copyright 2014 Lance Ball
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
// Since we intend to use the Function constructor.
/* jshint evil: true */

module = (typeof module == 'undefined') ? {} :  module;

(function() {
  var System  = java.lang.System,
      Scanner = java.util.Scanner,
      File    = java.io.File;

  NativeRequire = (typeof NativeRequire === 'undefined') ? {} : NativeRequire;
  if (typeof require === 'function' && !NativeRequire.require) {
    NativeRequire.require = require;
  }

  function Module(id, parent, core) {
    this.id = id;
    this.core = core;
    this.parent = parent;
    this.children = [];
    this.filename = id;
    this.loaded = false;

    Object.defineProperty( this, 'exports', {
      get: function() {
        return this._exports;
      }.bind(this),
      set: function(val) {
        Require.cache[this.filename] = val;
        this._exports = val;
      }.bind(this),
    } );
    this.exports = {};

    if (parent && parent.children) parent.children.push(this);

    this.require = function(id) {
      return Require(id, this);
    }.bind(this);
  }

  Module._load = function _load(file, parent, core, main) {
    var module = new Module(file, parent, core);
    var __FILENAME__ = module.filename;
    var body   = readFile(module.filename, module.core),
        dir    = new File(module.filename).getParent(),
        args   = ['exports', 'module', 'require', '__filename', '__dirname'],
        func   = new Function(args, body);
    func.apply(module,
        [module.exports, module, module.require, module.filename, dir]);
    module.loaded = true;
    module.main = main;
    return module.exports;
  };

  Module.runMain = function runMain(main) {
    var file = Require.resolve(main);
    Module._load(file, undefined, false, true);
  };

  function Require(id, parent) {
    var core, native, file = Require.resolve(id, parent);

    if (!file) {
      if (typeof NativeRequire.require === 'function') {
        if (Require.debug) {
          System.out.println(['Cannot resolve', id, 'defaulting to native'].join(' '));
        }
        native = NativeRequire.require(id);
        if (native) return native;
        System.err.println("Cannot find module " + id);
      }
      throw new ModuleError("Cannot find module " + id, "MODULE_NOT_FOUND");
    }

    if (file.core) {
      file = file.path;
      core = true;
    }
    try {
      if (Require.cache[file]) {
        return Require.cache[file];
      } else if (file.endsWith('.js')) {
        return Module._load(file, parent, core);
      } else if (file.endsWith('.json')) {
        return loadJSON(file);
      }
    } catch(ex) {
      if (ex instanceof java.lang.Exception)
        throw new ModuleError("Cannot load module " + id, "LOAD_ERROR", ex);
      else throw ex;
    }
  }

  Require.resolve = function(id, parent) {
    var roots = findRoots(parent);
    for ( var i = 0 ; i < roots.length ; ++i ) {
      var root = roots[i];
      var result = resolveCoreModule(id, root) ||
        resolveAsFile(id, root, '.js')   ||
        resolveAsFile(id, root, '.json') ||
        resolveAsDirectory(id, root)     ||
        resolveAsNodeModule(id, root);
      if ( result ) {
        return result;
      }
    }
    return false;
  };

  Require.root = System.getProperty('user.dir');
  Require.NODE_PATH = undefined;

  function findRoots(parent) {
    var r = [];
    r.push( findRoot( parent ) );
    return r.concat( Require.paths() );
  }

  function parsePaths(paths) {
    if ( ! paths ) {
      return [];
    }
    if ( paths === '' ) {
      return [];
    }
    var osName = java.lang.System.getProperty("os.name").toLowerCase();
    var separator;

    if ( osName.indexOf( 'win' ) >= 0 ) {
      separator = ';';
    } else {
      separator = ':';
    }

    return paths.split( separator );
  }

  Require.paths = function() {
    var r = [];
    r.push( java.lang.System.getProperty( "user.home" ) + "/.node_modules" );
    r.push( java.lang.System.getProperty( "user.home" ) + "/.node_libraries" );

    if ( Require.NODE_PATH ) {
      r = r.concat( parsePaths( Require.NODE_PATH ) );
    } else {
      var NODE_PATH = java.lang.System.getenv.NODE_PATH;
      if ( NODE_PATH ) {
        r = r.concat( parsePaths( NODE_PATH ) );
      }
    }
    // r.push( $PREFIX + "/node/library" );
    return r;
  };

  function findRoot(parent) {
    if (!parent || !parent.id) { return Require.root; }
    var pathParts = parent.id.split('/');
    pathParts.pop();
    return pathParts.join('/');
  }

  Require.debug = true;
  Require.cache = {};
  Require.extensions = {};
  require = Require;

  module.exports = Module;


  function loadJSON(file) {
    var json = JSON.parse(readFile(file));
    Require.cache[file] = json;
    return json;
  }

  function resolveAsNodeModule(id, root) {
    var base = [root, 'node_modules'].join('/');
    return resolveAsFile(id, base) ||
      resolveAsDirectory(id, base) ||
      (root ? resolveAsNodeModule(id, new File(root).getParent()) : false);
  }

  function resolveAsDirectory(id, root) {
    var base = [root, id].join('/'),
        file = new File([base, 'package.json'].join('/'));
    if (file.exists()) {
      try {
        var body = readFile(file.getCanonicalPath()),
            package  = JSON.parse(body);
        if (package.main) {
          return (resolveAsFile(package.main, base) ||
                  resolveAsDirectory(package.main, base));
        }
        // if no package.main exists, look for index.js
        return resolveAsFile('index.js', base);
      } catch(ex) {
        throw new ModuleError("Cannot load JSON file", "PARSE_ERROR", ex);
      }
    }
    return resolveAsFile('index.js', base);
  }

  function resolveAsFile(id, root, ext) {
    var file;
    if ( id.indexOf('/') === 0 ) {
      file = new File(normalizeName(id, ext || '.js'));
      if (!file.exists()) {
        return resolveAsDirectory(id);
      }
    } else {
      file = new File([root, normalizeName(id, ext || '.js')].join('/'));
    }
    if (file.exists()) {
      return file.getCanonicalPath();
    }
  }

  function resolveCoreModule(id, root) {
    var name = normalizeName(id);
    var classloader = java.lang.Thread.currentThread().getContextClassLoader();
    if (classloader.findResource(name))
        return { path: name, core: true };
  }

  function normalizeName(fileName, ext) {
    var extension = ext || '.js';
    if (fileName.endsWith(extension)) {
      return fileName;
    }
    return fileName + extension;
  }

  function readFile(filename, core) {
    var input;
    try {
      if (core) {
        var classloader = java.lang.Thread.currentThread().getContextClassLoader();
        input = classloader.getResourceAsStream(filename);
      } else {
        input = new File(filename);
      }
      // TODO: I think this is not very efficient
      return new Scanner(input).useDelimiter("\\A").next();
    } catch(e) {
      throw new ModuleError("Cannot read file ["+input+"]: ", "IO_ERROR", e);
    }
  }

  function ModuleError(message, code, cause) {
    this.code = code || "UNDEFINED";
    this.message = message || "Error loading module";
    this.cause = cause;
  }

  // Helper function until ECMAScript 6 is complete
  if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function(suffix) {
      if (!suffix) return false;
      return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
  }

  ModuleError.prototype = new Error();
  ModuleError.prototype.constructor = ModuleError;

}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImp2bS1ucG0uanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztHQUVHO0FBQ0gsbURBQW1EO0FBQ25ELHVCQUF1Qjs7QUFFdkIsTUFBTSxHQUFHLENBQUMsT0FBTyxNQUFNLElBQUksV0FBVyxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUM7O0FBRXZELENBQUMsV0FBVztFQUNWLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtNQUMxQixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO0FBQ2pDLE1BQU0sSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDOztFQUUzQixhQUFhLEdBQUcsQ0FBQyxPQUFPLGFBQWEsS0FBSyxXQUFXLElBQUksRUFBRSxHQUFHLGFBQWEsQ0FBQztFQUM1RSxJQUFJLE9BQU8sT0FBTyxLQUFLLFVBQVUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUU7SUFDM0QsYUFBYSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDcEMsR0FBRzs7RUFFRCxTQUFTLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtJQUNoQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7O0lBRXBCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtNQUN0QyxHQUFHLEVBQUUsV0FBVztRQUNkLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztPQUN0QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDWixHQUFHLEVBQUUsU0FBUyxHQUFHLEVBQUU7UUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO09BQ3JCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztLQUNiLEVBQUUsQ0FBQztBQUNSLElBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7O0FBRXRCLElBQUksSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7SUFFMUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLEVBQUUsRUFBRTtNQUMxQixPQUFPLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDMUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsR0FBRzs7RUFFRCxNQUFNLENBQUMsS0FBSyxHQUFHLFNBQVMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtJQUN0RCxJQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVDLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDbkMsSUFBSSxJQUFJLEtBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQztRQUMvQyxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBRTtRQUM5QyxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsV0FBVyxDQUFDO1FBQ3BFLElBQUksS0FBSyxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO1FBQ2IsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwRSxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNyQixNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDMUIsR0FBRyxDQUFDOztFQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsSUFBSSxFQUFFO0lBQ3RDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMvQyxHQUFHLENBQUM7O0VBRUYsU0FBUyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRTtBQUMvQixJQUFJLElBQUksSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7O0lBRXJELElBQUksQ0FBQyxJQUFJLEVBQUU7TUFDVCxJQUFJLE9BQU8sYUFBYSxDQUFDLE9BQU8sS0FBSyxVQUFVLEVBQUU7UUFDL0MsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1VBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLHNCQUFzQixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDOUU7UUFDRCxNQUFNLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuQyxJQUFJLE1BQU0sRUFBRSxPQUFPLE1BQU0sQ0FBQztRQUMxQixNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxFQUFFLENBQUMsQ0FBQztPQUNoRDtNQUNELE1BQU0sSUFBSSxXQUFXLENBQUMscUJBQXFCLEdBQUcsRUFBRSxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDNUUsS0FBSzs7SUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7TUFDYixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztNQUNqQixJQUFJLEdBQUcsSUFBSSxDQUFDO0tBQ2I7SUFDRCxJQUFJO01BQ0YsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUM1QixNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMvQixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztPQUN6QyxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNqQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN2QjtLQUNGLENBQUMsTUFBTSxFQUFFLEVBQUU7TUFDVixJQUFJLEVBQUUsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7UUFDbkMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxxQkFBcUIsR0FBRyxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1dBQ2pFLE1BQU0sRUFBRSxDQUFDO0tBQ2Y7QUFDTCxHQUFHOztFQUVELE9BQU8sQ0FBQyxPQUFPLEdBQUcsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFO0lBQ3JDLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRztNQUN6QyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDcEIsSUFBSSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQztRQUN0QyxhQUFhLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUM7UUFDOUIsYUFBYSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDO1FBQ2hDLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUM7UUFDNUIsbUJBQW1CLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO01BQ2hDLEtBQUssTUFBTSxHQUFHO1FBQ1osT0FBTyxNQUFNLENBQUM7T0FDZjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsR0FBRyxDQUFDOztFQUVGLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNoRCxFQUFFLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDOztFQUU5QixTQUFTLFNBQVMsQ0FBQyxNQUFNLEVBQUU7SUFDekIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ1gsQ0FBQyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQztJQUM3QixPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7QUFDdkMsR0FBRzs7RUFFRCxTQUFTLFVBQVUsQ0FBQyxLQUFLLEVBQUU7SUFDekIsS0FBSyxFQUFFLEtBQUssR0FBRztNQUNiLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxLQUFLLEtBQUssS0FBSyxFQUFFLEdBQUc7TUFDbEIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN2RSxJQUFJLElBQUksU0FBUyxDQUFDOztJQUVkLEtBQUssTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUc7TUFDbEMsU0FBUyxHQUFHLEdBQUcsQ0FBQztLQUNqQixNQUFNO01BQ0wsU0FBUyxHQUFHLEdBQUcsQ0FBQztBQUN0QixLQUFLOztJQUVELE9BQU8sS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQztBQUNwQyxHQUFHOztFQUVELE9BQU8sQ0FBQyxLQUFLLEdBQUcsV0FBVztJQUN6QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDWCxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0FBQzdFLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQzs7SUFFM0UsS0FBSyxPQUFPLENBQUMsU0FBUyxHQUFHO01BQ3ZCLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQztLQUNqRCxNQUFNO01BQ0wsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztNQUNsRCxLQUFLLFNBQVMsR0FBRztRQUNmLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDO09BQ3pDO0FBQ1AsS0FBSzs7SUFFRCxPQUFPLENBQUMsQ0FBQztBQUNiLEdBQUcsQ0FBQzs7RUFFRixTQUFTLFFBQVEsQ0FBQyxNQUFNLEVBQUU7SUFDeEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNuRCxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDaEIsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9CLEdBQUc7O0VBRUQsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7RUFDckIsT0FBTyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7RUFDbkIsT0FBTyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDMUIsRUFBRSxPQUFPLEdBQUcsT0FBTyxDQUFDOztBQUVwQixFQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQzFCOztFQUVFLFNBQVMsUUFBUSxDQUFDLElBQUksRUFBRTtJQUN0QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLEdBQUc7O0VBRUQsU0FBUyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFO0lBQ3JDLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QyxPQUFPLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDO01BQzVCLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUM7T0FDM0IsSUFBSSxHQUFHLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzNFLEdBQUc7O0VBRUQsU0FBUyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFO0lBQ3BDLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDM0IsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3RELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFO01BQ2pCLElBQUk7UUFDRixJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1VBQ2hCLFFBQVEsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO2tCQUNqQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQzFELFNBQVM7O1FBRUQsT0FBTyxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO09BQ3hDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDVixNQUFNLElBQUksV0FBVyxDQUFDLHVCQUF1QixFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQztPQUNuRTtLQUNGO0lBQ0QsT0FBTyxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNDLEdBQUc7O0VBRUQsU0FBUyxhQUFhLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7SUFDcEMsSUFBSSxJQUFJLENBQUM7SUFDVCxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHO01BQzNCLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO01BQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDbEIsT0FBTyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztPQUMvQjtLQUNGLE1BQU07TUFDTCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNwRTtJQUNELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFO01BQ2pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7S0FDaEM7QUFDTCxHQUFHOztFQUVELFNBQVMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRTtJQUNuQyxJQUFJLElBQUksR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMzRSxJQUFJLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQzlCLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUMxQyxHQUFHOztFQUVELFNBQVMsYUFBYSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7SUFDcEMsSUFBSSxTQUFTLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQztJQUM3QixJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7TUFDaEMsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFDRCxPQUFPLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDaEMsR0FBRzs7RUFFRCxTQUFTLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ2hDLElBQUksS0FBSyxDQUFDO0lBQ1YsSUFBSTtNQUNGLElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUMzRSxLQUFLLEdBQUcsV0FBVyxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQ25ELE1BQU07UUFDTCxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkMsT0FBTzs7TUFFRCxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUN0RCxDQUFDLE1BQU0sQ0FBQyxFQUFFO01BQ1QsTUFBTSxJQUFJLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN4RTtBQUNMLEdBQUc7O0VBRUQsU0FBUyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7SUFDekMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksV0FBVyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxJQUFJLHNCQUFzQixDQUFDO0lBQ2pELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLEdBQUc7QUFDSDs7RUFFRSxJQUFJLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEtBQUssVUFBVSxFQUFFO0lBQ25ELE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFNBQVMsTUFBTSxFQUFFO01BQzNDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxLQUFLLENBQUM7TUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUNqRSxDQUFDO0FBQ04sR0FBRzs7RUFFRCxXQUFXLENBQUMsU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7QUFDdEMsRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7O0NBRWpELEVBQUUsRUFBRSIsImZpbGUiOiJqdm0tbnBtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IDIwMTQgTGFuY2UgQmFsbFxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBTaW5jZSB3ZSBpbnRlbmQgdG8gdXNlIHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3Rvci5cbi8qIGpzaGludCBldmlsOiB0cnVlICovXG5cbm1vZHVsZSA9ICh0eXBlb2YgbW9kdWxlID09ICd1bmRlZmluZWQnKSA/IHt9IDogIG1vZHVsZTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgU3lzdGVtICA9IGphdmEubGFuZy5TeXN0ZW0sXG4gICAgICBTY2FubmVyID0gamF2YS51dGlsLlNjYW5uZXIsXG4gICAgICBGaWxlICAgID0gamF2YS5pby5GaWxlO1xuXG4gIE5hdGl2ZVJlcXVpcmUgPSAodHlwZW9mIE5hdGl2ZVJlcXVpcmUgPT09ICd1bmRlZmluZWQnKSA/IHt9IDogTmF0aXZlUmVxdWlyZTtcbiAgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nICYmICFOYXRpdmVSZXF1aXJlLnJlcXVpcmUpIHtcbiAgICBOYXRpdmVSZXF1aXJlLnJlcXVpcmUgPSByZXF1aXJlO1xuICB9XG5cbiAgZnVuY3Rpb24gTW9kdWxlKGlkLCBwYXJlbnQsIGNvcmUpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdGhpcy5maWxlbmFtZSA9IGlkO1xuICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdleHBvcnRzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4cG9ydHM7XG4gICAgICB9LmJpbmQodGhpcyksXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBSZXF1aXJlLmNhY2hlW3RoaXMuZmlsZW5hbWVdID0gdmFsO1xuICAgICAgICB0aGlzLl9leHBvcnRzID0gdmFsO1xuICAgICAgfS5iaW5kKHRoaXMpLFxuICAgIH0gKTtcbiAgICB0aGlzLmV4cG9ydHMgPSB7fTtcblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LmNoaWxkcmVuKSBwYXJlbnQuY2hpbGRyZW4ucHVzaCh0aGlzKTtcblxuICAgIHRoaXMucmVxdWlyZSA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gUmVxdWlyZShpZCwgdGhpcyk7XG4gICAgfS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgTW9kdWxlLl9sb2FkID0gZnVuY3Rpb24gX2xvYWQoZmlsZSwgcGFyZW50LCBjb3JlLCBtYWluKSB7XG4gICAgdmFyIG1vZHVsZSA9IG5ldyBNb2R1bGUoZmlsZSwgcGFyZW50LCBjb3JlKTtcbiAgICB2YXIgX19GSUxFTkFNRV9fID0gbW9kdWxlLmZpbGVuYW1lO1xuICAgIHZhciBib2R5ICAgPSByZWFkRmlsZShtb2R1bGUuZmlsZW5hbWUsIG1vZHVsZS5jb3JlKSxcbiAgICAgICAgZGlyICAgID0gbmV3IEZpbGUobW9kdWxlLmZpbGVuYW1lKS5nZXRQYXJlbnQoKSxcbiAgICAgICAgYXJncyAgID0gWydleHBvcnRzJywgJ21vZHVsZScsICdyZXF1aXJlJywgJ19fZmlsZW5hbWUnLCAnX19kaXJuYW1lJ10sXG4gICAgICAgIGZ1bmMgICA9IG5ldyBGdW5jdGlvbihhcmdzLCBib2R5KTtcbiAgICBmdW5jLmFwcGx5KG1vZHVsZSxcbiAgICAgICAgW21vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5yZXF1aXJlLCBtb2R1bGUuZmlsZW5hbWUsIGRpcl0pO1xuICAgIG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuICAgIG1vZHVsZS5tYWluID0gbWFpbjtcbiAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gIH07XG5cbiAgTW9kdWxlLnJ1bk1haW4gPSBmdW5jdGlvbiBydW5NYWluKG1haW4pIHtcbiAgICB2YXIgZmlsZSA9IFJlcXVpcmUucmVzb2x2ZShtYWluKTtcbiAgICBNb2R1bGUuX2xvYWQoZmlsZSwgdW5kZWZpbmVkLCBmYWxzZSwgdHJ1ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gUmVxdWlyZShpZCwgcGFyZW50KSB7XG4gICAgdmFyIGNvcmUsIG5hdGl2ZSwgZmlsZSA9IFJlcXVpcmUucmVzb2x2ZShpZCwgcGFyZW50KTtcblxuICAgIGlmICghZmlsZSkge1xuICAgICAgaWYgKHR5cGVvZiBOYXRpdmVSZXF1aXJlLnJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKFJlcXVpcmUuZGVidWcpIHtcbiAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oWydDYW5ub3QgcmVzb2x2ZScsIGlkLCAnZGVmYXVsdGluZyB0byBuYXRpdmUnXS5qb2luKCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIG5hdGl2ZSA9IE5hdGl2ZVJlcXVpcmUucmVxdWlyZShpZCk7XG4gICAgICAgIGlmIChuYXRpdmUpIHJldHVybiBuYXRpdmU7XG4gICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkNhbm5vdCBmaW5kIG1vZHVsZSBcIiArIGlkKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBNb2R1bGVFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSBcIiArIGlkLCBcIk1PRFVMRV9OT1RfRk9VTkRcIik7XG4gICAgfVxuXG4gICAgaWYgKGZpbGUuY29yZSkge1xuICAgICAgZmlsZSA9IGZpbGUucGF0aDtcbiAgICAgIGNvcmUgPSB0cnVlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgaWYgKFJlcXVpcmUuY2FjaGVbZmlsZV0pIHtcbiAgICAgICAgcmV0dXJuIFJlcXVpcmUuY2FjaGVbZmlsZV07XG4gICAgICB9IGVsc2UgaWYgKGZpbGUuZW5kc1dpdGgoJy5qcycpKSB7XG4gICAgICAgIHJldHVybiBNb2R1bGUuX2xvYWQoZmlsZSwgcGFyZW50LCBjb3JlKTtcbiAgICAgIH0gZWxzZSBpZiAoZmlsZS5lbmRzV2l0aCgnLmpzb24nKSkge1xuICAgICAgICByZXR1cm4gbG9hZEpTT04oZmlsZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaChleCkge1xuICAgICAgaWYgKGV4IGluc3RhbmNlb2YgamF2YS5sYW5nLkV4Y2VwdGlvbilcbiAgICAgICAgdGhyb3cgbmV3IE1vZHVsZUVycm9yKFwiQ2Fubm90IGxvYWQgbW9kdWxlIFwiICsgaWQsIFwiTE9BRF9FUlJPUlwiLCBleCk7XG4gICAgICBlbHNlIHRocm93IGV4O1xuICAgIH1cbiAgfVxuXG4gIFJlcXVpcmUucmVzb2x2ZSA9IGZ1bmN0aW9uKGlkLCBwYXJlbnQpIHtcbiAgICB2YXIgcm9vdHMgPSBmaW5kUm9vdHMocGFyZW50KTtcbiAgICBmb3IgKCB2YXIgaSA9IDAgOyBpIDwgcm9vdHMubGVuZ3RoIDsgKytpICkge1xuICAgICAgdmFyIHJvb3QgPSByb290c1tpXTtcbiAgICAgIHZhciByZXN1bHQgPSByZXNvbHZlQ29yZU1vZHVsZShpZCwgcm9vdCkgfHxcbiAgICAgICAgcmVzb2x2ZUFzRmlsZShpZCwgcm9vdCwgJy5qcycpICAgfHxcbiAgICAgICAgcmVzb2x2ZUFzRmlsZShpZCwgcm9vdCwgJy5qc29uJykgfHxcbiAgICAgICAgcmVzb2x2ZUFzRGlyZWN0b3J5KGlkLCByb290KSAgICAgfHxcbiAgICAgICAgcmVzb2x2ZUFzTm9kZU1vZHVsZShpZCwgcm9vdCk7XG4gICAgICBpZiAoIHJlc3VsdCApIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIFJlcXVpcmUucm9vdCA9IFN5c3RlbS5nZXRQcm9wZXJ0eSgndXNlci5kaXInKTtcbiAgUmVxdWlyZS5OT0RFX1BBVEggPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gZmluZFJvb3RzKHBhcmVudCkge1xuICAgIHZhciByID0gW107XG4gICAgci5wdXNoKCBmaW5kUm9vdCggcGFyZW50ICkgKTtcbiAgICByZXR1cm4gci5jb25jYXQoIFJlcXVpcmUucGF0aHMoKSApO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQYXRocyhwYXRocykge1xuICAgIGlmICggISBwYXRocyApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKCBwYXRocyA9PT0gJycgKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHZhciBvc05hbWUgPSBqYXZhLmxhbmcuU3lzdGVtLmdldFByb3BlcnR5KFwib3MubmFtZVwiKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBzZXBhcmF0b3I7XG5cbiAgICBpZiAoIG9zTmFtZS5pbmRleE9mKCAnd2luJyApID49IDAgKSB7XG4gICAgICBzZXBhcmF0b3IgPSAnOyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcGFyYXRvciA9ICc6JztcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aHMuc3BsaXQoIHNlcGFyYXRvciApO1xuICB9XG5cbiAgUmVxdWlyZS5wYXRocyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByID0gW107XG4gICAgci5wdXNoKCBqYXZhLmxhbmcuU3lzdGVtLmdldFByb3BlcnR5KCBcInVzZXIuaG9tZVwiICkgKyBcIi8ubm9kZV9tb2R1bGVzXCIgKTtcbiAgICByLnB1c2goIGphdmEubGFuZy5TeXN0ZW0uZ2V0UHJvcGVydHkoIFwidXNlci5ob21lXCIgKSArIFwiLy5ub2RlX2xpYnJhcmllc1wiICk7XG5cbiAgICBpZiAoIFJlcXVpcmUuTk9ERV9QQVRIICkge1xuICAgICAgciA9IHIuY29uY2F0KCBwYXJzZVBhdGhzKCBSZXF1aXJlLk5PREVfUEFUSCApICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBOT0RFX1BBVEggPSBqYXZhLmxhbmcuU3lzdGVtLmdldGVudi5OT0RFX1BBVEg7XG4gICAgICBpZiAoIE5PREVfUEFUSCApIHtcbiAgICAgICAgciA9IHIuY29uY2F0KCBwYXJzZVBhdGhzKCBOT0RFX1BBVEggKSApO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyByLnB1c2goICRQUkVGSVggKyBcIi9ub2RlL2xpYnJhcnlcIiApO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGZpbmRSb290KHBhcmVudCkge1xuICAgIGlmICghcGFyZW50IHx8ICFwYXJlbnQuaWQpIHsgcmV0dXJuIFJlcXVpcmUucm9vdDsgfVxuICAgIHZhciBwYXRoUGFydHMgPSBwYXJlbnQuaWQuc3BsaXQoJy8nKTtcbiAgICBwYXRoUGFydHMucG9wKCk7XG4gICAgcmV0dXJuIHBhdGhQYXJ0cy5qb2luKCcvJyk7XG4gIH1cblxuICBSZXF1aXJlLmRlYnVnID0gdHJ1ZTtcbiAgUmVxdWlyZS5jYWNoZSA9IHt9O1xuICBSZXF1aXJlLmV4dGVuc2lvbnMgPSB7fTtcbiAgcmVxdWlyZSA9IFJlcXVpcmU7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBNb2R1bGU7XG5cblxuICBmdW5jdGlvbiBsb2FkSlNPTihmaWxlKSB7XG4gICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHJlYWRGaWxlKGZpbGUpKTtcbiAgICBSZXF1aXJlLmNhY2hlW2ZpbGVdID0ganNvbjtcbiAgICByZXR1cm4ganNvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVBc05vZGVNb2R1bGUoaWQsIHJvb3QpIHtcbiAgICB2YXIgYmFzZSA9IFtyb290LCAnbm9kZV9tb2R1bGVzJ10uam9pbignLycpO1xuICAgIHJldHVybiByZXNvbHZlQXNGaWxlKGlkLCBiYXNlKSB8fFxuICAgICAgcmVzb2x2ZUFzRGlyZWN0b3J5KGlkLCBiYXNlKSB8fFxuICAgICAgKHJvb3QgPyByZXNvbHZlQXNOb2RlTW9kdWxlKGlkLCBuZXcgRmlsZShyb290KS5nZXRQYXJlbnQoKSkgOiBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlQXNEaXJlY3RvcnkoaWQsIHJvb3QpIHtcbiAgICB2YXIgYmFzZSA9IFtyb290LCBpZF0uam9pbignLycpLFxuICAgICAgICBmaWxlID0gbmV3IEZpbGUoW2Jhc2UsICdwYWNrYWdlLmpzb24nXS5qb2luKCcvJykpO1xuICAgIGlmIChmaWxlLmV4aXN0cygpKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgYm9keSA9IHJlYWRGaWxlKGZpbGUuZ2V0Q2Fub25pY2FsUGF0aCgpKSxcbiAgICAgICAgICAgIHBhY2thZ2UgID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgaWYgKHBhY2thZ2UubWFpbikge1xuICAgICAgICAgIHJldHVybiAocmVzb2x2ZUFzRmlsZShwYWNrYWdlLm1haW4sIGJhc2UpIHx8XG4gICAgICAgICAgICAgICAgICByZXNvbHZlQXNEaXJlY3RvcnkocGFja2FnZS5tYWluLCBiYXNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgbm8gcGFja2FnZS5tYWluIGV4aXN0cywgbG9vayBmb3IgaW5kZXguanNcbiAgICAgICAgcmV0dXJuIHJlc29sdmVBc0ZpbGUoJ2luZGV4LmpzJywgYmFzZSk7XG4gICAgICB9IGNhdGNoKGV4KSB7XG4gICAgICAgIHRocm93IG5ldyBNb2R1bGVFcnJvcihcIkNhbm5vdCBsb2FkIEpTT04gZmlsZVwiLCBcIlBBUlNFX0VSUk9SXCIsIGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmVBc0ZpbGUoJ2luZGV4LmpzJywgYmFzZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlQXNGaWxlKGlkLCByb290LCBleHQpIHtcbiAgICB2YXIgZmlsZTtcbiAgICBpZiAoIGlkLmluZGV4T2YoJy8nKSA9PT0gMCApIHtcbiAgICAgIGZpbGUgPSBuZXcgRmlsZShub3JtYWxpemVOYW1lKGlkLCBleHQgfHwgJy5qcycpKTtcbiAgICAgIGlmICghZmlsZS5leGlzdHMoKSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUFzRGlyZWN0b3J5KGlkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZmlsZSA9IG5ldyBGaWxlKFtyb290LCBub3JtYWxpemVOYW1lKGlkLCBleHQgfHwgJy5qcycpXS5qb2luKCcvJykpO1xuICAgIH1cbiAgICBpZiAoZmlsZS5leGlzdHMoKSkge1xuICAgICAgcmV0dXJuIGZpbGUuZ2V0Q2Fub25pY2FsUGF0aCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVDb3JlTW9kdWxlKGlkLCByb290KSB7XG4gICAgdmFyIG5hbWUgPSBub3JtYWxpemVOYW1lKGlkKTtcbiAgICB2YXIgY2xhc3Nsb2FkZXIgPSBqYXZhLmxhbmcuVGhyZWFkLmN1cnJlbnRUaHJlYWQoKS5nZXRDb250ZXh0Q2xhc3NMb2FkZXIoKTtcbiAgICBpZiAoY2xhc3Nsb2FkZXIuZmluZFJlc291cmNlKG5hbWUpKVxuICAgICAgICByZXR1cm4geyBwYXRoOiBuYW1lLCBjb3JlOiB0cnVlIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKGZpbGVOYW1lLCBleHQpIHtcbiAgICB2YXIgZXh0ZW5zaW9uID0gZXh0IHx8ICcuanMnO1xuICAgIGlmIChmaWxlTmFtZS5lbmRzV2l0aChleHRlbnNpb24pKSB7XG4gICAgICByZXR1cm4gZmlsZU5hbWU7XG4gICAgfVxuICAgIHJldHVybiBmaWxlTmFtZSArIGV4dGVuc2lvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRGaWxlKGZpbGVuYW1lLCBjb3JlKSB7XG4gICAgdmFyIGlucHV0O1xuICAgIHRyeSB7XG4gICAgICBpZiAoY29yZSkge1xuICAgICAgICB2YXIgY2xhc3Nsb2FkZXIgPSBqYXZhLmxhbmcuVGhyZWFkLmN1cnJlbnRUaHJlYWQoKS5nZXRDb250ZXh0Q2xhc3NMb2FkZXIoKTtcbiAgICAgICAgaW5wdXQgPSBjbGFzc2xvYWRlci5nZXRSZXNvdXJjZUFzU3RyZWFtKGZpbGVuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0ID0gbmV3IEZpbGUoZmlsZW5hbWUpO1xuICAgICAgfVxuICAgICAgLy8gVE9ETzogSSB0aGluayB0aGlzIGlzIG5vdCB2ZXJ5IGVmZmljaWVudFxuICAgICAgcmV0dXJuIG5ldyBTY2FubmVyKGlucHV0KS51c2VEZWxpbWl0ZXIoXCJcXFxcQVwiKS5uZXh0KCk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0aHJvdyBuZXcgTW9kdWxlRXJyb3IoXCJDYW5ub3QgcmVhZCBmaWxlIFtcIitpbnB1dCtcIl06IFwiLCBcIklPX0VSUk9SXCIsIGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIE1vZHVsZUVycm9yKG1lc3NhZ2UsIGNvZGUsIGNhdXNlKSB7XG4gICAgdGhpcy5jb2RlID0gY29kZSB8fCBcIlVOREVGSU5FRFwiO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UgfHwgXCJFcnJvciBsb2FkaW5nIG1vZHVsZVwiO1xuICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcbiAgfVxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB1bnRpbCBFQ01BU2NyaXB0IDYgaXMgY29tcGxldGVcbiAgaWYgKHR5cGVvZiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCA9IGZ1bmN0aW9uKHN1ZmZpeCkge1xuICAgICAgaWYgKCFzdWZmaXgpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc3VmZml4LCB0aGlzLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpICE9PSAtMTtcbiAgICB9O1xuICB9XG5cbiAgTW9kdWxlRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG4gIE1vZHVsZUVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1vZHVsZUVycm9yO1xuXG59KCkpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9